// process@2.1.0 downloaded from https://ga.jspm.io/npm:@jspm/core@2.1.0/nodelibs/browser/process.js

function unimplemented(e){throw new Error("Node.js process "+e+" is not supported by JSPM core outside of Node.js")}var e=[];var n=false;var r;var t=-1;function cleanUpNextTick(){if(n&&r){n=false;r.length?e=r.concat(e):t=-1;e.length&&drainQueue()}}function drainQueue(){if(!n){var a=setTimeout(cleanUpNextTick,0);n=true;var o=e.length;while(o){r=e;e=[];while(++t<o)r&&r[t].run();t=-1;o=e.length}r=null;n=false;clearTimeout(a)}}function nextTick(r){var t=new Array(arguments.length-1);if(arguments.length>1)for(var a=1;a<arguments.length;a++)t[a-1]=arguments[a];e.push(new Item(r,t));e.length!==1||n||setTimeout(drainQueue,0)}function Item(e,n){this.fun=e;this.array=n}Item.prototype.run=function(){this.fun.apply(null,this.array)};var a="browser";var o="x64";var i="browser";var s={PATH:"/usr/bin",LANG:typeof navigator!=="undefined"?navigator.language+".UTF-8":void 0,PWD:"/",HOME:"/home",TMP:"/tmp"};var v=["/usr/bin/node"];var l=[];var u="v16.8.0";var c={};var emitWarning=function(e,n){console.warn((n?n+": ":"")+e)};var binding=function(e){unimplemented("binding")};var umask=function(e){return 0};var cwd=function(){return"/"};var chdir=function(e){};var d={name:"node",sourceUrl:"",headersUrl:"",libUrl:""};function noop(){}var p=true;var f=noop;var g=[];function _linkedBinding(e){unimplemented("_linkedBinding")}var m={};var h=false;var _={};function dlopen(e){unimplemented("dlopen")}function _getActiveRequests(){return[]}function _getActiveHandles(){return[]}var b=noop;var w=noop;var cpuUsage=function(){return{}};var k=cpuUsage;var x=cpuUsage;var U=noop;var A=noop;var E=noop;var y={};function assert(e,n){if(!e)throw new Error(n||"assertion error")}var C={inspector:false,debug:false,uv:false,ipv6:false,tls_alpn:false,tls_sni:false,tls_ocsp:false,tls:false,cached_builtins:true};var T=noop;var L=noop;function hasUncaughtExceptionCaptureCallback(){return false}var P=noop;var B=noop;var I=noop;var N=noop;var M=noop;var H=void 0;var D=void 0;var S=void 0;var q=noop;var R=2;var Q=1;var j="/bin/usr/node";var F=9229;var O="node";var W=[];var G=noop;var J={now:typeof performance!=="undefined"?performance.now.bind(performance):void 0,timing:typeof performance!=="undefined"?performance.timing:void 0};if(J.now===void 0){var z=Date.now();J.timing&&J.timing.navigationStart&&(z=J.timing.navigationStart);J.now=()=>Date.now()-z}function uptime(){return J.now()/1e3}var K=1e9;function hrtime(e){var n=Math.floor(.001*(Date.now()-J.now()));var r=J.now()*.001;var t=Math.floor(r)+n;var a=Math.floor(r%1*1e9);if(e){t-=e[0];a-=e[1];if(a<0){t--;a+=K}}return[t,a]}hrtime.bigint=function(e){var n=hrtime(e);return typeof BigInt==="undefined"?n[0]*K+n[1]:BigInt(n[0]*K)+BigInt(n[1])};var V=10;var X={};var Y=0;function on(){return ie}var Z=on;var $=on;var ee=on;var ne=on;var re=on;var te=noop;var ae=on;var oe=on;function listeners(e){return[]}var ie={version:u,versions:c,arch:o,platform:i,browser:p,release:d,_rawDebug:f,moduleLoadList:g,binding:binding,_linkedBinding:_linkedBinding,_events:X,_eventsCount:Y,_maxListeners:V,on:on,addListener:Z,once:$,off:ee,removeListener:ne,removeAllListeners:re,emit:te,prependListener:ae,prependOnceListener:oe,listeners:listeners,domain:m,_exiting:h,config:_,dlopen:dlopen,uptime:uptime,_getActiveRequests:_getActiveRequests,_getActiveHandles:_getActiveHandles,reallyExit:b,_kill:w,cpuUsage:cpuUsage,resourceUsage:k,memoryUsage:x,kill:U,exit:A,openStdin:E,allowedNodeEnvironmentFlags:y,assert:assert,features:C,_fatalExceptions:T,setUncaughtExceptionCaptureCallback:L,hasUncaughtExceptionCaptureCallback:hasUncaughtExceptionCaptureCallback,emitWarning:emitWarning,nextTick:nextTick,_tickCallback:P,_debugProcess:B,_debugEnd:I,_startProfilerIdleNotifier:N,_stopProfilerIdleNotifier:M,stdout:H,stdin:S,stderr:D,abort:q,umask:umask,chdir:chdir,cwd:cwd,env:s,title:a,argv:v,execArgv:l,pid:R,ppid:Q,execPath:j,debugPort:F,hrtime:hrtime,argv0:O,_preload_modules:W,setSourceMapsEnabled:G};export{I as _debugEnd,B as _debugProcess,X as _events,Y as _eventsCount,h as _exiting,T as _fatalExceptions,_getActiveHandles,_getActiveRequests,w as _kill,_linkedBinding,V as _maxListeners,W as _preload_modules,f as _rawDebug,N as _startProfilerIdleNotifier,M as _stopProfilerIdleNotifier,P as _tickCallback,q as abort,Z as addListener,y as allowedNodeEnvironmentFlags,o as arch,v as argv,O as argv0,assert,binding,p as browser,chdir,_ as config,cpuUsage,cwd,F as debugPort,ie as default,dlopen,m as domain,te as emit,emitWarning,s as env,l as execArgv,j as execPath,A as exit,C as features,hasUncaughtExceptionCaptureCallback,hrtime,U as kill,listeners,x as memoryUsage,g as moduleLoadList,nextTick,ee as off,on,$ as once,E as openStdin,R as pid,i as platform,Q as ppid,ae as prependListener,oe as prependOnceListener,b as reallyExit,d as release,re as removeAllListeners,ne as removeListener,k as resourceUsage,G as setSourceMapsEnabled,L as setUncaughtExceptionCaptureCallback,D as stderr,S as stdin,H as stdout,a as title,umask,uptime,u as version,c as versions};

